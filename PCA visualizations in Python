#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Tue Jun 26 16:20:24 2018

@author: jney
"""

#https://www.dataquest.io/blog/machine-learning-python/


# Import libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler
from sklearn import preprocessing

# Read in the data.
df = pandas.read_csv("/Users/jney/Desktop/top50.csv")
# Print the names of the columns in games.
print(df.columns)

features = ['Prior', 'Post', 'Maker_vol', 'Taker_vol']

# Remove any rows with missing values.
df = df.dropna(axis=0)

#create a new df with std for each column
stats = df.agg(['min', 'max', 'std'])
print(stats)

# Initialize the model with 2 parameters -- number of clusters and random state.
kmeans_model = KMeans(n_clusters=5, random_state=123, init='k-means++', n_init=10)
# Get only the numeric columns from games.
good_columns = df._get_numeric_data()
# Fit the model using the good columns.
kmeans_model.fit(good_columns)
df['label'] = kmeans_model.predict(df[features])

print df[ df['label'] == 0 ].head()

# Get the cluster assignments.
labels = kmeans_model.labels_


#create a new df where the cell values are replaced with scaled z-score values
scaler = preprocessing.StandardScaler().fit(good_columns)
scale_good_columns = pd.DataFrame(scaler.transform(good_columns), columns=features)
scaler.transform(good_columns)


#show how many items are in each cluster
counts = np.bincount(labels[labels>=0])
print(counts)

#show the centers of the 5 clusters
centroids = kmeans_model.cluster_centers_
print(centroids)


# Create a PCA model
pca_2 = PCA(2)
# Fit the PCA model on the numeric columns from earlier.
plot_columns = pca_2.fit_transform(scale_good_columns) #or can use good_columns instead of scale_good_columns
# Make a scatter plot of each game, shaded according to cluster assignment. where coloring(c)=labels
plt.scatter(x=plot_columns[:,0], y=plot_columns[:,1], c=labels)
# Show the plot.
plt.show()

#add labels to the dataframe as a new column called "cluster"
df["cluster"]= labels




